@import avl
@import math
@import time

<@
def heightOk(tree):
    h = tree.tree_height()
    l = len(tree.inorder())
    if (l == 0):
       return True
    m = math.log(l,2)
    assert(PRE%(tree.inorder())% == tree.inorder())
    return h <= (m + 1)

def items(s):
    l = []
    for i in s:
       l.append(i)
    return sorted(l)

def test_after_reduce(sut):
    sut.setLog(2)
@>

source: avl.py

log: 1 %AVL%.inorder()
log: POST 1 %AVL%.inorder()

pool: %INT% 4
pool: %AVL% 3 REF
pool: %LIST% 1

property: heightOk(%AVL%) 
property: %AVL%.check_balanced()
property: len(%AVL%.inorder()) < 12

%LIST%:=[]
~%LIST%.append(%INT%) 
%INT%:=%[1..20]%
%AVL%:=avl.AVLTree()
%AVL%:=avl.AVLTree(%LIST%)
~%AVL%.insert(%INT%) => \
   (len(%AVL,1%.inorder()) == PRE%(len(%AVL,1%.inorder()))%+1) \
   or PRE%(%AVL,1%.find(%INT,1%))%
~%AVL%.delete(%INT%) => \
   (len(%AVL,1%.inorder()) == PRE%(len(%AVL,1%.inorder()))%-1) \
   or not PRE%((%AVL,1%.find(%INT,1%)))%
~%AVL%.find(%INT%)
%AVL%.inorder()
#len(%AVL,1%.inorder()) > 5 -> ~%AVL%.display()
~%AVL% == ~%AVL%

reference: avl.AVLTree ==> set
reference: insert ==> add
reference: delete ==> discard
reference: find ==> __contains__
#reference: (\S+)\.inorder\(\) ==> items(\1)
reference: METHOD(inorder) ==> CALL(items)
reference: METHOD(display) ==> CALL(print)

compare: find
compare: inorder
